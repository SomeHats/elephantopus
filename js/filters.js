// Generated by LiveScript 1.2.0
(function(){
  var c, BlurXVignetteFilter, BlurYVignetteFilter, GlowYFilter, GlowXFilter, BackgroundShader;
  c = 1 / 7000;
  BlurXVignetteFilter = function(){
    PIXI.AbstractFilter.call(this);
    this.passes = [this];
    this.uniforms = {
      blur: {
        type: '1f',
        value: 1 / 512
      },
      innerRadius: {
        type: '1f',
        value: 0.15
      },
      outerRadius: {
        type: '1f',
        value: 0.5
      },
      center: {
        type: '2f',
        value: {
          x: 0.5,
          y: 0.5
        }
      }
    };
    this.fragmentSrc = ['precision highp float;', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'uniform float blur;', 'uniform float innerRadius;', 'uniform float outerRadius;', 'uniform vec2 center;', 'uniform sampler2D uSampler;', 'void main(void) {', ' float blurer = blur;', ' float gray;', ' float light;', ' float distance = length(center - vTextureCoord);', ' if (distance < innerRadius) {', '   blurer = 0.0;', '   gray = 0.0;', '   light = 0.0;', ' } else {', '   float dc = ((distance - innerRadius) / (outerRadius - innerRadius));', '   blurer = blur * dc;', '   gray = 0.7 * dc;', '   light = 0.3 * dc;', '   if (gray > 1.0) { gray = 1.0; }', '   if (light > 1.0) { light = 1.0; }', ' }', ' vec4 sum = vec4(0.0);', ' sum += texture2D(uSampler, vec2(vTextureCoord.x - 4.0*blurer, vTextureCoord.y)) * 0.05;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x - 3.0*blurer, vTextureCoord.y)) * 0.09;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x - 2.0*blurer, vTextureCoord.y)) * 0.12;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x - blurer, vTextureCoord.y)) * 0.15;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x + blurer, vTextureCoord.y)) * 0.15;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x + 2.0*blurer, vTextureCoord.y)) * 0.12;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x + 3.0*blurer, vTextureCoord.y)) * 0.09;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x + 4.0*blurer, vTextureCoord.y)) * 0.05;', ' gl_FragColor = sum;', ' float lightness = 0.2126*gl_FragColor.r + 0.7152*gl_FragColor.g + 0.0722*gl_FragColor.b;', ' vec3 target = mix(vec3(1.0/255.0, 25.0/255.0, 23.0/255.0), vec3(42.0/255.0, 66.0/255.0, 62.0/255.0), lightness);', ' gl_FragColor.rgb = mix(gl_FragColor.rgb, target, gray);', '}'];
    return this;
  };
  BlurXVignetteFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);
  BlurXVignetteFilter.prototype.constructor = BlurXVignetteFilter;
  Object.defineProperty(BlurXVignetteFilter.prototype, 'blur', {
    get: function(){
      return this.uniforms.blur.value / c;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.blur.value = value * c;
    }
  });
  Object.defineProperty(BlurXVignetteFilter.prototype, 'innerRadius', {
    get: function(){
      return this.uniforms.innerRadius.value;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.innerRadius.value = value;
    }
  });
  Object.defineProperty(BlurXVignetteFilter.prototype, 'outerRadius', {
    get: function(){
      return this.uniforms.outerRadius.value;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.outerRadius.value = value;
    }
  });
  Object.defineProperty(BlurXVignetteFilter.prototype, 'centerX', {
    get: function(){
      return this.uniforms.center.value.x;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.center.value.x = value;
    }
  });
  Object.defineProperty(BlurXVignetteFilter.prototype, 'centerY', {
    get: function(){
      return this.uniforms.center.value.y;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.center.value.y = value;
    }
  });
  BlurYVignetteFilter = function(){
    PIXI.AbstractFilter.call(this);
    this.passes = [this];
    this.uniforms = {
      blur: {
        type: '1f',
        value: 1 / 512
      },
      innerRadius: {
        type: '1f',
        value: 0.15
      },
      outerRadius: {
        type: '1f',
        value: 0.5
      },
      center: {
        type: '2f',
        value: {
          x: 0.5,
          y: 0.5
        }
      }
    };
    this.fragmentSrc = ['precision highp float;', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'uniform float blur;', 'uniform float innerRadius;', 'uniform float outerRadius;', 'uniform vec2 center;', 'uniform sampler2D uSampler;', 'void main(void) {', ' float blurer = blur;', ' float distance = length(center - vTextureCoord);', ' if (distance < innerRadius) {', '   blurer = 0.0;', ' } else {', '   blurer = blur * ((distance - innerRadius) / (outerRadius - innerRadius));', ' }', ' vec4 sum = vec4(0.0);', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 4.0*blurer)) * 0.05;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 3.0*blurer)) * 0.09;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 2.0*blurer)) * 0.12;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - blurer)) * 0.15;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + blurer)) * 0.15;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 2.0*blurer)) * 0.12;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 3.0*blurer)) * 0.09;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 4.0*blurer)) * 0.05;', ' gl_FragColor = sum;', '}'];
    return this;
  };
  BlurYVignetteFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);
  BlurYVignetteFilter.prototype.constructor = BlurYVignetteFilter;
  Object.defineProperty(BlurYVignetteFilter.prototype, 'blur', {
    get: function(){
      return this.uniforms.blur.value / c;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.blur.value = value * c;
    }
  });
  Object.defineProperty(BlurYVignetteFilter.prototype, 'innerRadius', {
    get: function(){
      return this.uniforms.innerRadius.value;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.innerRadius.value = value;
    }
  });
  Object.defineProperty(BlurYVignetteFilter.prototype, 'outerRadius', {
    get: function(){
      return this.uniforms.outerRadius.value;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.outerRadius.value = value;
    }
  });
  Object.defineProperty(BlurYVignetteFilter.prototype, 'centerX', {
    get: function(){
      return this.uniforms.center.value.x;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.center.value.x = value;
    }
  });
  Object.defineProperty(BlurYVignetteFilter.prototype, 'centerY', {
    get: function(){
      return this.uniforms.center.value.y;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.center.value.y = value;
    }
  });
  window.BlurVignetteFilter = function(){
    this.blurXFilter = new BlurXVignetteFilter();
    this.blurYFilter = new BlurYVignetteFilter();
    this.blurXAfter = new BlurXVignetteFilter();
    this.blurYAfter = new BlurYVignetteFilter();
    this.passes = [this.blurXFilter, this.blurYFilter, this.blurXAfter, this.blurYAfter];
    return this;
  };
  Object.defineProperty(BlurVignetteFilter.prototype, 'blur', {
    get: function(){
      return this.blurXFilter.blur;
    },
    set: function(value){
      this.blurXFilter.blur = value;
      return this.blurYFilter.blur = value;
    }
  });
  Object.defineProperty(BlurVignetteFilter.prototype, 'postBlur', {
    get: function(){
      return this.blurXAfter.blur;
    },
    set: function(value){
      this.blurXAfter.blur = value;
      return this.blurYAfter.blur = value;
    }
  });
  Object.defineProperty(BlurVignetteFilter.prototype, 'innerRadius', {
    get: function(){
      return this.blurXFilter.innerRadius;
    },
    set: function(value){
      this.blurXFilter.innerRadius = value;
      return this.blurYFilter.innerRadius = value;
    }
  });
  Object.defineProperty(BlurVignetteFilter.prototype, 'outerRadius', {
    get: function(){
      return this.blurXFilter.outerRadius;
    },
    set: function(value){
      this.blurXFilter.outerRadius = value;
      return this.blurYFilter.outerRadius = value;
    }
  });
  Object.defineProperty(BlurVignetteFilter.prototype, 'centerX', {
    get: function(){
      return this.blurXFilter.centerX;
    },
    set: function(value){
      this.blurXFilter.centerX = value;
      return this.blurYFilter.centerX = value;
    }
  });
  Object.defineProperty(BlurVignetteFilter.prototype, 'centerY', {
    get: function(){
      return this.blurXFilter.centerY;
    },
    set: function(value){
      this.blurXFilter.centerY = value;
      return this.blurYFilter.centerY = value;
    }
  });
  GlowYFilter = function(){
    PIXI.AbstractFilter.call(this);
    this.passes = [this];
    this.uniforms = {
      blur: {
        type: '1f',
        value: 1 / 512
      }
    };
    this.fragmentSrc = ['precision highp float;', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'uniform float blur;', 'uniform sampler2D uSampler;', 'void main(void) {', ' float blurer = blur;', ' vec4 sum = vec4(0.0);', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 4.0*blurer)) * 0.05;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 3.0*blurer)) * 0.09;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - 2.0*blurer)) * 0.12;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y - blurer)) * 0.15;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + blurer)) * 0.15;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 2.0*blurer)) * 0.12;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 3.0*blurer)) * 0.09;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y + 4.0*blurer)) * 0.05;', ' gl_FragColor.rgb = mix(gl_FragColor.rgb, sum.rgb, 1.0);', '}'];
    return this;
  };
  GlowYFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);
  GlowYFilter.prototype.constructor = GlowYFilter;
  Object.defineProperty(GlowYFilter.prototype, 'blur', {
    get: function(){
      return this.uniforms.blur.value / c;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.blur.value = value * c;
    }
  });
  GlowXFilter = function(){
    PIXI.AbstractFilter.call(this);
    this.passes = [this];
    this.uniforms = {
      blur: {
        type: '1f',
        value: 1 / 512
      }
    };
    this.fragmentSrc = ['precision highp float;', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'uniform float blur;', 'uniform sampler2D uSampler;', 'void main(void) {', ' float blurer = blur;', ' vec4 sum = vec4(0.0);', ' sum += texture2D(uSampler, vec2(vTextureCoord.x - 4.0*blurer, vTextureCoord.y)) * 0.05;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x - 3.0*blurer, vTextureCoord.y)) * 0.09;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x - 2.0*blurer, vTextureCoord.y)) * 0.12;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x - blurer, vTextureCoord.y)) * 0.15;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x, vTextureCoord.y)) * 0.16;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x + blurer, vTextureCoord.y)) * 0.15;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x + 2.0*blurer, vTextureCoord.y)) * 0.12;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x + 3.0*blurer, vTextureCoord.y)) * 0.09;', ' sum += texture2D(uSampler, vec2(vTextureCoord.x + 4.0*blurer, vTextureCoord.y)) * 0.05;', ' gl_FragColor = sum + gl_FragColor;', '}'];
    return this;
  };
  GlowXFilter.prototype = Object.create(PIXI.AbstractFilter.prototype);
  GlowXFilter.prototype.constructor = GlowXFilter;
  Object.defineProperty(GlowXFilter.prototype, 'blur', {
    get: function(){
      return this.uniforms.blur.value / c;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.blur.value = value * c;
    }
  });
  window.GlowFilter = function(){
    this.xFilter = new GlowXFilter();
    this.yFilter = new GlowYFilter();
    this.passes = [this.xFilter, this.yFilter];
    return this;
  };
  Object.defineProperty(GlowFilter.prototype, 'blur', {
    get: function(){
      return this.xFilter.blur;
    },
    set: function(value){
      this.xFilter.blur = value;
      return this.yFilter.blur = value;
    }
  });
  window.BackgroundShader = BackgroundShader = function(){
    PIXI.AbstractFilter.call(this);
    this.passes = [this];
    this.uniforms = {
      time: {
        type: '1f',
        value: Date.now()
      },
      position: {
        type: '2f',
        value: {
          x: 0,
          y: 0
        }
      }
    };
    this.fragmentSrc = ['//', '// Description : Array and textureless GLSL 2D/3D/4D simplex', '// noise functions.', '// Author : Ian McEwan, Ashima Arts.', '// Maintainer : ijm', '// Lastmod : 20110822 (ijm)', '// License : Copyright (C) 2011 Ashima Arts. All rights reserved.', '// Distributed under the MIT License. See LICENSE file.', '// https://github.com/ashima/webgl-noise', '//', 'precision highp float;', 'vec3 mod289(vec3 x) {', '  return x - floor(x * (1.0 / 289.0)) * 289.0;', '}', 'vec4 mod289(vec4 x) {', '  return x - floor(x * (1.0 / 289.0)) * 289.0;', '}', 'vec4 permute(vec4 x) {', '     return mod289(((x*34.0)+1.0)*x);', '}', 'vec4 taylorInvSqrt(vec4 r)', '{', '  return 1.79284291400159 - 0.85373472095314 * r;', '}', 'float snoise(vec3 v)', '  {', '  const vec2 C = vec2(1.0/6.0, 1.0/3.0) ;', '  const vec4 D = vec4(0.0, 0.5, 1.0, 2.0);', '// First corner', '  vec3 i = floor(v + dot(v, C.yyy) );', '  vec3 x0 = v - i + dot(i, C.xxx) ;', '// Other corners', '  vec3 g = step(x0.yzx, x0.xyz);', '  vec3 l = 1.0 - g;', '  vec3 i1 = min( g.xyz, l.zxy );', '  vec3 i2 = max( g.xyz, l.zxy );', '  // x0 = x0 - 0.0 + 0.0 * C.xxx;', '  // x1 = x0 - i1 + 1.0 * C.xxx;', '  // x2 = x0 - i2 + 2.0 * C.xxx;', '  // x3 = x0 - 1.0 + 3.0 * C.xxx;', '  vec3 x1 = x0 - i1 + C.xxx;', '  vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y', '  vec3 x3 = x0 - D.yyy; // -1.0+3.0*C.x = -0.5 = -D.y', '// Permutations', '  i = mod289(i);', '  vec4 p = permute( permute( permute(', '             i.z + vec4(0.0, i1.z, i2.z, 1.0 ))', '           + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))', '           + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));', '// Gradients: 7x7 points over a square, mapped onto an octahedron.', '// The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)', '  float n_ = 0.142857142857; // 1.0/7.0', '  vec3 ns = n_ * D.wyz - D.xzx;', '  vec4 j = p - 49.0 * floor(p * ns.z * ns.z); // mod(p,7*7)', '  vec4 x_ = floor(j * ns.z);', '  vec4 y_ = floor(j - 7.0 * x_ ); // mod(j,N)', '  vec4 x = x_ *ns.x + ns.yyyy;', '  vec4 y = y_ *ns.x + ns.yyyy;', '  vec4 h = 1.0 - abs(x) - abs(y);', '  vec4 b0 = vec4( x.xy, y.xy );', '  vec4 b1 = vec4( x.zw, y.zw );', '  //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;', '  //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;', '  vec4 s0 = floor(b0)*2.0 + 1.0;', '  vec4 s1 = floor(b1)*2.0 + 1.0;', '  vec4 sh = -step(h, vec4(0.0));', '  vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;', '  vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;', '  vec3 p0 = vec3(a0.xy,h.x);', '  vec3 p1 = vec3(a0.zw,h.y);', '  vec3 p2 = vec3(a1.xy,h.z);', '  vec3 p3 = vec3(a1.zw,h.w);', '//Normalise gradients', '  vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));', '  p0 *= norm.x;', '  p1 *= norm.y;', '  p2 *= norm.z;', '  p3 *= norm.w;', '// Mix final noise value', '  vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);', '  m = m * m;', '  return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),', '                                dot(p2,x2), dot(p3,x3) ) );', '  }', 'varying vec2 vTextureCoord;', 'varying vec4 vColor;', 'uniform float time;', 'uniform vec2 position;', 'uniform sampler2D uSampler;', 'void main(void)', '{', '  vec2 uv = position;', '  uv.y *= -1.0;', '  uv += gl_FragCoord.xy;', '  uv = uv / 200.0;', '  uv.y *= 0.3;', '  gl_FragColor = vec4(1.0);', '  float c = snoise(vec3(uv, time / 2.0));', '  gl_FragColor.rgb = mix(vec3(1.0/255.0, 25.0/255.0, 23.0/255.0), vec3(42.0/255.0, 66.0/255.0, 62.0/255.0), c);', '}'];
    return this;
  };
  BackgroundShader.prototype = Object.create(PIXI.AbstractFilter.prototype);
  BackgroundShader.prototype.constructor = BackgroundShader;
  Object.defineProperty(BackgroundShader.prototype, 'time', {
    get: function(){
      return this.uniforms.time.value / c;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.time.value = value * c;
    }
  });
  Object.defineProperty(BackgroundShader.prototype, 'position', {
    get: function(){
      return this.uniforms.position.value;
    },
    set: function(value){
      this.dirty = false;
      return this.uniforms.position.value = value;
    }
  });
}).call(this);
