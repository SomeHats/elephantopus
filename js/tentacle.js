// Generated by LiveScript 1.2.0
(function(){
  var Tentacle, TentacleSet;
  window.Tentacle = Tentacle = (function(superclass){
    var prototype = extend$((import$(Tentacle, superclass).displayName = 'Tentacle', Tentacle), superclass).prototype, constructor = Tentacle;
    function Tentacle(segments){
      var parent, res$, i$, i, segment;
      segments == null && (segments = 6);
      this.update = bind$(this, 'update', prototype);
      Tentacle.superclass.call(this);
      parent = this;
      this.rotation = Math.PI / 2;
      res$ = [];
      for (i$ = 0; i$ < segments; ++i$) {
        i = i$;
        segment = new PIXI.Sprite.fromImage('assets/img/tentacle.png');
        segment.position.x = 65;
        segment.position.y = 15;
        segment.scale.y = segment.scale.x = 0.8;
        segment.pivot.y = 15;
        parent.addChild(segment);
        res$.push(parent = segment);
      }
      this.segments = res$;
      this.speed = random(1000, 2500);
      this.initial = random(0, Math.PI);
      this.speedScale = random(0.3, 0.6);
      this.wiggle = random(1.3, 1.7);
    }
    prototype.update = function(t){
      var i$, ref$, len$, segment, results$ = [];
      t = t / this.speed;
      t += this.initial;
      for (i$ = 0, len$ = (ref$ = this.segments).length; i$ < len$; ++i$) {
        segment = ref$[i$];
        segment.rotation = this.speedScale * Math.cos(t);
        results$.push(t *= this.wiggle);
      }
      return results$;
    };
    return Tentacle;
  }(PIXI.DisplayObjectContainer));
  window.TentacleSet = TentacleSet = (function(superclass){
    var prototype = extend$((import$(TentacleSet, superclass).displayName = 'TentacleSet', TentacleSet), superclass).prototype, constructor = TentacleSet;
    function TentacleSet(n, segments, offset){
      var totalRotate, rotateStep, rotate, res$, i$, i, tentacle;
      n == null && (n = 8);
      segments == null && (segments = 6);
      offset == null && (offset = 17);
      TentacleSet.superclass.call(this);
      totalRotate = Math.PI / 2;
      rotateStep = totalRotate / n;
      rotate = Math.PI / 4;
      res$ = [];
      for (i$ = 0; i$ < n; ++i$) {
        i = i$;
        tentacle = new Tentacle(segments);
        tentacle.position.x = offset * i;
        rotate += rotateStep;
        this.addChild(tentacle);
        res$.push(tentacle);
      }
      this.tentacles = res$;
    }
    prototype.update = function(t){
      var i$, ref$, len$, tentacle, results$ = [];
      for (i$ = 0, len$ = (ref$ = this.tentacles).length; i$ < len$; ++i$) {
        tentacle = ref$[i$];
        results$.push(tentacle.update(t));
      }
      return results$;
    };
    return TentacleSet;
  }(PIXI.DisplayObjectContainer));
  function bind$(obj, key, target){
    return function(){ return (target || obj)[key].apply(obj, arguments) };
  }
  function extend$(sub, sup){
    function fun(){} fun.prototype = (sub.superclass = sup).prototype;
    (sub.prototype = new fun).constructor = sub;
    if (typeof sup.extended == 'function') sup.extended(sub);
    return sub;
  }
  function import$(obj, src){
    var own = {}.hasOwnProperty;
    for (var key in src) if (own.call(src, key)) obj[key] = src[key];
    return obj;
  }
}).call(this);
